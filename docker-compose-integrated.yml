version: '3.8'

# Configura√ß√£o integrada: Pipeline DGU + Apache Airflow 3.0

x-airflow-common:
  &airflow-common
  image: dgu-airflow:latest
  build:
    context: .
    dockerfile: Dockerfile.airflow
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__CORE__DEFAULT_TIMEZONE: 'America/Sao_Paulo'
    AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: 'America/Sao_Paulo'
    
    # Vari√°veis do projeto DGU
    GOOGLE_APPLICATION_CREDENTIALS: /opt/airflow/credentials/bigquery-credentials.json
    DBT_PROFILES_DIR: /opt/airflow/dbt
    PROJECT_ID: dataglowup-458411
    DATASET_ID: DataGlowUp
    
    # Configura√ß√µes de logging
    AIRFLOW__LOGGING__LOGGING_LEVEL: INFO
    
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/credentials:/opt/airflow/credentials:ro
    - ${AIRFLOW_PROJ_DIR:-.}/DGU:/opt/airflow/dbt:ro
    - ${AIRFLOW_PROJ_DIR:-.}:/opt/airflow/project:ro
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  # Banco de dados PostgreSQL para Airflow
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    ports:
      - "5432:5432"

  # Servi√ßo web do Airflow
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Scheduler do Airflow
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Triggerer do Airflow (para sensores)
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Inicializa√ß√£o do Airflow
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=3.0.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  # Servi√ßo CLI do Airflow (para debug)
  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  # Servi√ßo do pipeline DGU standalone (opcional)
  dgu-pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dgu-pipeline-standalone
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/bigquery-credentials.json
      - DBT_PROFILES_DIR=/app/DGU
      - PROJECT_ID=dataglowup-458411
      - DATASET_ID=DataGlowUp
    volumes:
      - ./credentials:/app/credentials:ro
      - ./logs:/app/logs
      - ./DGU/seeds:/app/DGU/seeds
      - ./DGU/profiles.yml:/app/DGU/profiles.yml:ro
    working_dir: /app
    profiles:
      - standalone
    command: tail -f /dev/null  # Manter container ativo para execu√ß√£o manual

  # Servi√ßo de monitoramento (opcional)
  dgu-monitoring:
    image: dgu-airflow:latest
    container_name: dgu-monitoring
    environment:
      <<: *airflow-common-env
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs:ro
      - ${AIRFLOW_PROJ_DIR:-.}/credentials:/opt/airflow/credentials:ro
    command: |
      bash -c "
        while true; do
          echo 'üìä Verificando status do pipeline DGU...'
          python /opt/airflow/project/airflow/plugins/dgu_alerts.py
          sleep 3600  # Verificar a cada hora
        done
      "
    profiles:
      - monitoring
    depends_on:
      - postgres

volumes:
  postgres-db-volume:

# Profiles para diferentes cen√°rios de uso
profiles:
  # Profile padr√£o: Apenas Airflow
  default:
    services:
      - postgres
      - airflow-webserver
      - airflow-scheduler
      - airflow-triggerer
      - airflow-init

  # Profile para debug: Inclui CLI
  debug:
    services:
      - postgres
      - airflow-webserver
      - airflow-scheduler
      - airflow-triggerer
      - airflow-init
      - airflow-cli

  # Profile standalone: Pipeline sem Airflow
  standalone:
    services:
      - dgu-pipeline

  # Profile completo: Tudo inclu√≠do
  full:
    services:
      - postgres
      - airflow-webserver
      - airflow-scheduler
      - airflow-triggerer
      - airflow-init
      - dgu-pipeline
      - dgu-monitoring

  # Profile de monitoramento
  monitoring:
    services:
      - postgres
      - airflow-webserver
      - airflow-scheduler
      - airflow-triggerer
      - airflow-init
      - dgu-monitoring
